{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport styles from \"./GymStyles\";\nimport DateTimePickerComponent from \"./DateTimePickerComponent\";\nimport { useUser, UserProvider } from \"../UserContext\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { format } from 'date-fns';\nimport { getDatabase, ref, set, get } from 'firebase/database';\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar iconsData = [{\n  id: 1,\n  name: '풋살장',\n  engName: 'futsal',\n  position: {\n    left: 270,\n    top: 55\n  }\n}, {\n  id: 2,\n  name: '체육관',\n  engName: 'gym',\n  position: {\n    left: 270,\n    top: 150\n  }\n}, {\n  id: 3,\n  name: '운동장',\n  engName: 'stadium',\n  position: {\n    left: 150,\n    top: 300\n  }\n}];\nvar GymScreen = function GymScreen() {\n  var _ref2, _ref3;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    checkedIcon = _useState2[0],\n    setCheckedIcon = _useState2[1];\n  var navigation = useNavigation();\n  var handleIconClick = function handleIconClick(iconEngName) {\n    if (checkedIcon === iconEngName) {\n      setCheckedIcon(null);\n      setSelectedIcon(null);\n    } else {\n      setCheckedIcon(iconEngName);\n      var selectedIconData = iconsData.find(function (icon) {\n        return icon.id === iconEngName;\n      });\n      setSelectedIcon(selectedIconData ? selectedIconData.engName : null);\n    }\n  };\n  var _useUser = useUser(),\n    userId = _useUser.userId;\n  {}\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedDate = _useState4[0],\n    setSelectedDate = _useState4[1];\n  {}\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedStartTime = _useState6[0],\n    setSelectedStartTime = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedEndTime = _useState8[0],\n    setSelectedEndTime = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    showModal = _useState10[0],\n    setShowModal = _useState10[1];\n  {}\n  var _useState11 = useState({}),\n    _useState12 = _slicedToArray(_useState11, 2),\n    reservationDetail = _useState12[0],\n    setReservationDetail = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    selectedIcon = _useState14[0],\n    setSelectedIcon = _useState14[1];\n  var userIdToFilter = userId;\n  var filteredLocation = {};\n  useEffect(function () {\n    var _ref;\n    var fetchReservation = function fetchReservation() {\n      return (_ref = _ref || _asyncToGenerator(function* () {\n        var db = getDatabase();\n        var reservationRef = ref(db, 'reservations');\n        if (!userId) return;\n        try {\n          var snapshot = yield get(reservationRef);\n          {}\n          if (snapshot.exists()) {\n            var allReservations = snapshot.val();\n            var reservationDetails = {};\n            for (var location in allReservations) {\n              {}\n              reservationDetails[location] = {};\n              for (var formattedDate in allReservations[location]) {\n                var userData = allReservations[location][formattedDate][userId];\n                if (userData) {\n                  reservationDetails[location][formattedDate] = {\n                    location: location,\n                    date: formattedDate,\n                    userData: userData\n                  };\n                }\n              }\n            }\n            setReservationDetail(reservationDetails);\n          } else {\n            setReservationDetail({});\n          }\n        } catch (error) {\n          console.error(error);\n          Alert.alert('알림', '예약 내역을 불러오는 중 오류가 발생했습니다.');\n        }\n      })).apply(this, arguments);\n    };\n    fetchReservation();\n  }, [userId]);\n  var handleReservation = function handleReservation() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      if (!checkedIcon) {\n        Alert.alert('알림', '운동 시설을 선택해주세요!');\n        return;\n      }\n      if (!userId) {\n        Alert.alert('알림', '로그인이 필요합니다.');\n        return;\n      }\n      if (!selectedDate || !selectedStartTime || !selectedEndTime) {\n        Alert.alert('알림', '날짜와 시간을 선택해주세요!');\n        return;\n      }\n      var formattedDate = format(selectedDate, 'yyyy-MM-dd');\n      var startTimeStr = format(selectedStartTime, 'HH:mm');\n      var endTimeStr = format(selectedEndTime, 'HH:mm');\n      var reservationData = _defineProperty({}, userId, startTimeStr + '-' + endTimeStr);\n      try {\n        var db = getDatabase();\n        var selectedIconData = iconsData.find(function (icon) {\n          return icon.id === checkedIcon;\n        });\n        if (selectedIconData) {\n          var iconEngName = selectedIconData.engName;\n          var reservationRef = ref(db, `reservations/${iconEngName}/${formattedDate}/${userId}`);\n          var snapshot = yield get(reservationRef);\n          if (snapshot.exists()) {\n            var existingReservation = snapshot.val();\n            var _existingReservation$ = existingReservation.split('-'),\n              _existingReservation$2 = _slicedToArray(_existingReservation$, 2),\n              existingStartTime = _existingReservation$2[0],\n              existingEndTime = _existingReservation$2[1];\n            if (startTimeStr >= existingStartTime && startTimeStr < existingEndTime || endTimeStr > existingStartTime && endTimeStr <= existingEndTime) {\n              Alert.alert('알림', '해당 시간에 이미 예약이 있습니다. 다른 시간을 선택해주세요.');\n            } else {\n              Alert.alert('알림', '이미 예약된 시간이 아닙니다.');\n            }\n          } else {\n            yield set(reservationRef, startTimeStr + '-' + endTimeStr);\n            var updatedReservation = {\n              date: formattedDate,\n              userData: reservationData[userId]\n            };\n            setReservationDetail({\n              date: formattedDate,\n              userData: reservationData[userId]\n            });\n            setSelectedDate(null);\n            setSelectedStartTime(null);\n            setSelectedEndTime(null);\n            setCheckedIcon(null);\n            Alert.alert('알림', '예약이 성공적으로 완료되었습니다!');\n          }\n        } else {\n          Alert.alert('알림', '선택된 아이콘에 대한 데이터를 찾을 수 없습니다.');\n        }\n      } catch (error) {\n        console.error(error);\n        Alert.alert('알림', '예약 중 오류가 발생했습니다. 다시 시도해주세요.');\n      }\n    })).apply(this, arguments);\n  };\n  var handleCancelReservation = function handleCancelReservation() {\n    return (_ref3 = _ref3 || _asyncToGenerator(function* () {\n      if (!userId) {\n        Alert.alert('알림', '로그인이 필요합니다.');\n        return;\n      }\n      var db = getDatabase();\n      var reservationRef = ref(db, 'reservations');\n      try {\n        var snapshot = yield get(reservationRef);\n        if (snapshot.exists()) {\n          var allReservations = snapshot.val();\n          for (var location in allReservations) {\n            var locationData = allReservations[location];\n            for (var formattedDate in locationData) {\n              if (userId in locationData[formattedDate]) {\n                delete locationData[formattedDate][userId];\n                yield set(ref(db, `reservations/${location}/${formattedDate}`), locationData[formattedDate]);\n                setSelectedDate(null);\n                setReservationDetail({});\n                setSelectedStartTime(null);\n                setSelectedEndTime(null);\n                setCheckedIcon(null);\n                Alert.alert('알림', '예약이 성공적으로 취소되었습니다.');\n                return;\n              }\n            }\n          }\n          setSelectedDate(null);\n          setReservationDetail({});\n          setSelectedStartTime(null);\n          setSelectedEndTime(null);\n          setCheckedIcon(null);\n          Alert.alert('알림', '예약이 성공적으로 취소되었습니다.');\n        } else {\n          setReservationDetail({});\n          Alert.alert('알림', '취소할 예약이 존재하지 않습니다.');\n        }\n      } catch (error) {\n        console.error(error);\n        Alert.alert('알림', '예약 내역을 불러오는 중 오류가 발생했습니다.');\n      }\n    })).apply(this, arguments);\n  };\n  return _jsx(UserProvider, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(LinearGradient, {\n        style: styles.headerContainer,\n        colors: ['#a0a0a0', '#f8f9fa', '#f8f9fa'],\n        children: [_jsx(View, {\n          style: styles.headerbutton,\n          children: _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigation.goBack();\n            },\n            children: _jsx(View, {\n              style: styles.backbutton,\n              children: _jsx(Icon, {\n                name: \"ios-arrow-back\",\n                size: 35\n              })\n            })\n          })\n        }), _jsx(View, {\n          style: styles.LogoimageContainer,\n          children: _jsx(ImageBackground, {\n            source: require(\"./../../assets/GWNU-LOGO.png\"),\n            style: styles.LogoimageStyle,\n            resizeMode: \"contain\"\n          })\n        }), _jsxs(View, {\n          style: styles.textContainer,\n          children: [_jsx(Text, {\n            style: styles.textStyle,\n            children: \"\\uAD6D\\uB9BD \\uAC15\\uB989\\uC6D0\\uC8FC\\uB300\\uD559\\uAD50\"\n          }), _jsx(Text, {\n            style: styles.subHeader,\n            children: \"GANGNEUNG-WONJU NATIONAL UNIVERSITY\"\n          })]\n        }), _jsx(View, {\n          style: styles.spacer\n        })]\n      }), _jsxs(View, {\n        style: styles.bodyContainer,\n        children: [_jsx(View, {\n          style: styles.bodyTopContainer\n        }), _jsxs(View, {\n          style: styles.bodyMiddleContainer,\n          children: [_jsx(Image, {\n            source: require(\"./GymScreen.jpg\"),\n            style: styles.Gymimage\n          }), iconsData.map(function (icon) {\n            return _jsx(TouchableOpacity, {\n              style: [styles.icon, icon.position, checkedIcon === icon.id ? styles.checkedIcon : styles.uncheckedIcon],\n              onPress: function onPress() {\n                return handleIconClick(icon.id);\n              },\n              children: _jsx(Text, {\n                style: styles.iconText,\n                children: icon.name\n              })\n            }, icon.id);\n          })]\n        })]\n      }), _jsx(View, {\n        style: styles.bodyBottomContainer\n      }), _jsxs(View, {\n        style: styles.reservationDetailContainer,\n        children: [_jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: [_jsx(Text, {\n            style: styles.reservationDetailTitle,\n            children: \"\\uB098\\uC758 \\uC608\\uC57D \\uB0B4\\uC5ED\"\n          }), Object.keys(reservationDetail).length > 0 && _jsx(TouchableOpacity, {\n            onPress: handleCancelReservation,\n            style: styles.reservationCancelButton,\n            children: _jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"\\uC608\\uC57D \\uCDE8\\uC18C\\uD558\\uAE30\"\n            })\n          })]\n        }), Object.keys(reservationDetail).length > 0 ? Object.keys(reservationDetail).map(function (location) {\n          return Object.keys(reservationDetail[location]).map(function (formattedDate) {\n            var userData = reservationDetail[location][formattedDate][userId];\n            if (userData) {\n              return _jsx(View, {\n                children: _jsxs(Text, {\n                  style: styles.reservationDetailText,\n                  children: [\"\\uC608\\uC57D \\uC7A5\\uC18C: \", location, \" \", '\\n', \"\\uB0A0\\uC9DC: \", formattedDate, \" \", '\\n', \"\\uC608\\uC57D \\uC2DC\\uAC04: \", userData, \" \", '\\n']\n                })\n              }, `${location}-${formattedDate}`);\n            }\n            return null;\n          });\n        }) : _jsx(Text, {\n          style: styles.reservationDetailText,\n          children: \"\\uC608\\uC57D \\uB0B4\\uC5ED\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4!\"\n        })]\n      }), _jsxs(View, {\n        style: styles.bottomBar,\n        children: [_jsxs(TouchableOpacity, {\n          onPress: function onPress() {\n            return setShowModal(true);\n          },\n          children: [_jsx(Text, {\n            children: \"\\uC774\\uC6A9\\uC2DC\\uAC04 \\uC124\\uC815\\uD558\\uAE30\"\n          }), selectedDate && selectedStartTime && selectedEndTime && _jsxs(Text, {\n            style: styles.greyText,\n            children: [format(selectedDate, 'yyyy/MMM/dd/EEE'), ' ', format(selectedStartTime, 'HH:mm'), \"~\", format(selectedEndTime, 'HH:mm')]\n          })]\n        }), _jsx(TouchableOpacity, {\n          style: [styles.reservationButton, checkedIcon ? styles.activeButton : styles.inactiveButton],\n          onPress: handleReservation,\n          disabled: !checkedIcon,\n          children: _jsx(Text, {\n            children: \"\\uC608\\uC57D\\uD558\\uAE30\"\n          })\n        })]\n      }), showModal && _jsx(DateTimePickerComponent, {\n        onClose: function onClose() {\n          return setShowModal(false);\n        },\n        onDateChange: setSelectedDate,\n        onStartChange: setSelectedStartTime,\n        onEndChange: setSelectedEndTime\n      })]\n    })\n  });\n};\nexport default GymScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableOpacity","Image","Alert","ImageBackground","styles","DateTimePickerComponent","useUser","UserProvider","LinearGradient","format","getDatabase","ref","set","get","Icon","useNavigation","jsx","_jsx","jsxs","_jsxs","iconsData","id","name","engName","position","left","top","GymScreen","_ref2","_ref3","_useState","_useState2","_slicedToArray","checkedIcon","setCheckedIcon","navigation","handleIconClick","iconEngName","setSelectedIcon","selectedIconData","find","icon","_useUser","userId","_useState3","_useState4","selectedDate","setSelectedDate","_useState5","_useState6","selectedStartTime","setSelectedStartTime","_useState7","_useState8","selectedEndTime","setSelectedEndTime","_useState9","_useState10","showModal","setShowModal","_useState11","_useState12","reservationDetail","setReservationDetail","_useState13","_useState14","selectedIcon","userIdToFilter","filteredLocation","_ref","fetchReservation","_asyncToGenerator","db","reservationRef","snapshot","exists","allReservations","val","reservationDetails","location","formattedDate","userData","date","error","console","alert","apply","arguments","handleReservation","startTimeStr","endTimeStr","reservationData","_defineProperty","existingReservation","_existingReservation$","split","_existingReservation$2","existingStartTime","existingEndTime","updatedReservation","handleCancelReservation","locationData","children","style","container","headerContainer","colors","headerbutton","onPress","goBack","backbutton","size","LogoimageContainer","source","require","LogoimageStyle","resizeMode","textContainer","textStyle","subHeader","spacer","bodyContainer","bodyTopContainer","bodyMiddleContainer","Gymimage","map","uncheckedIcon","iconText","bodyBottomContainer","reservationDetailContainer","flexDirection","alignItems","reservationDetailTitle","Object","keys","length","reservationCancelButton","color","reservationDetailText","bottomBar","greyText","reservationButton","activeButton","inactiveButton","disabled","onClose","onDateChange","onStartChange","onEndChange"],"sources":["C:/Capstone/Moblie__Programming_01-1/Gym/GymScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TouchableOpacity,Image, \r\n         Alert, ImageBackground, } from 'react-native';\r\nimport styles from './GymStyles';\r\nimport DateTimePickerComponent from './DateTimePickerComponent';\r\nimport { useUser, UserProvider } from '../UserContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { format } from 'date-fns';\r\nimport { getDatabase, ref, set, get} from 'firebase/database';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst iconsData = [\r\n  { id: 1, name: '풋살장', engName: 'futsal', position: { left: 270, top: 55 } },\r\n  { id: 2, name: '체육관', engName: 'gym', position: { left: 270, top: 150 } },\r\n  { id: 3, name: '운동장', engName: 'stadium', position: { left: 150, top: 300 } },\r\n];\r\n\r\nconst GymScreen = () => {\r\n  const [checkedIcon, setCheckedIcon] = useState(null);\r\n  const navigation = useNavigation();\r\n  const handleIconClick = (iconEngName) => {\r\n    if (checkedIcon === iconEngName) {\r\n      setCheckedIcon(null);\r\n      setSelectedIcon(null);\r\n    } else {\r\n      setCheckedIcon(iconEngName);\r\n      const selectedIconData = iconsData.find((icon) => icon.id === iconEngName);\r\n      setSelectedIcon(selectedIconData ? selectedIconData.engName : null);\r\n    }\r\n  };  \r\n\r\n  const { userId } = useUser(); \r\n  {/*useUser(): UserContext.js에서 가져온 사용자 정보\r\n    -> 그중에서도 userId만 가져온다는뜻*/}\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  {/*useState(): 상태를 저장하고 변경하는 도구 - React 라이브러리\r\n    -> 처음 접속 시, 아무 날짜도 선택하지 않았으니 null 값이 들어가야함\r\n       현재 선택된 날짜 = selectedDate, 값을 바꿔주는 함수 = setSelectedDate*/}\r\n  const [selectedStartTime, setSelectedStartTime] = useState(null);\r\n  // 시작 시간에 대한 코드\r\n  const [selectedEndTime, setSelectedEndTime] = useState(null);\r\n  // 종료 시간에 대한 코드\r\n  const [showModal, setShowModal] = useState(false);\r\n  {/* -> 처음 접속 시, 모달 창이 보이지 않도록 설정해야 하므로 false\r\n       view 라인 살펴보면 버튼 클릭시 setShowModal(ture)로 설정해주는 코드가 있음\r\n       이런식으로 보여주고 숨기고 하는 것임*/}\r\n  const [reservationDetail, setReservationDetail] = useState({});\r\n  //예약 정보에 대한 자세한 정보를 담는 변수 -> 초기에 빈 객체로 ({}) 초기화\r\n  const [selectedIcon, setSelectedIcon] = useState(null);\r\n  // 아이콘 클릭 상태에 대한 코드\r\n  const userIdToFilter = userId;\r\n  const filteredLocation = {};\r\n\r\n  useEffect(() => { //[userId]); userId 값 변경될때마다 -> 내부 함수 실행\r\n    const fetchReservation = async () => {\r\n      //비동기 함수 정의. 서버로부터 데이터를 불러오는 작업을 비동기적 작업이라함. await 키워드를 사용하려면 async 키워드로 정의해줘야함\r\n      const db = getDatabase(); //데이터베이스 연결\r\n      const reservationRef = ref(db, 'reservations'); // 2. \"reservations\" 의 참조를 가져옴 : 경로 이름(\"테이블\")\r\n      if (!userId) return; // 사용자가 로그인하지 않았다면 함수 종료\r\n  \r\n      try {\r\n        const snapshot = await get(reservationRef); \r\n        {/* 'reservations'의 모든 데이터를 가져옴. \r\n            get함수가 작업의 완료를 알리기 위해 Promise를 반환.\r\n            await는 Promise가 settled 상태가 될 때까지 기다림. 완료되면 결과 값을 snapshot에 할당\r\n            이때, settled 상태는 두 가지로 나뉨 :\r\n            - fulfilled 상태: 정상적으로 작업이 완료된 상태\r\n            - rejected 상태: 예외가 발생한 상태(에러) */}\r\n        if (snapshot.exists()) { //exists()는 Firebase에서 제공하는 메서드. snapshot에 실제로 데이터가 있는지를 확인하는 함수. 있으면 true, 없으면 false\r\n          const allReservations = snapshot.val();\r\n          //마찬가지로 val()은 Firebase 메서드. -> 현재 데이터를 추출하는 메서드. 추출한 데이터 allReservations에 저장\r\n\r\n          const reservationDetails = {}; //빈 객체 생성\r\n\r\n          for (const location in allReservations) { \r\n            {/* JavaScript의 for...in 구문. 객체의 모든 열거 가능한 속성에 대해 반복 작업 수행.\r\n                location에 객체의 각 속성(키)의 이름을 담는 변수.\r\n                쉽게 reservations의 모든 데이터 중 첫 번째 키 값을 가져와 넣음\r\n                Gym, futsal, stadium 세 가지 가져오는거임*/}\r\n            reservationDetails[location] = {};\r\n            // 빈 객체 안에 장소 키 값 즉, 장소 이름을 넣고 그 안에는 또 빈 객체로 비워둠\r\n  \r\n            for (const formattedDate in allReservations[location]) {\r\n              // 이번엔 모든 장소(Gym, futsal, stadium)에서 날짜 값(ex)2023-10-26 등)을 조회함\r\n              const userData = allReservations[location][formattedDate][userId];\r\n              // allReservations에서 선택된 장소(location)와 날짜(formattedDate)에 대한 특정 사용자(userId)의 예약 정보를 userData에 할당 \r\n              if (userData) { //userData가 존재할 경우,\r\n                reservationDetails[location][formattedDate] = {\r\n                  //reservationDetails 객체에 장소, 날짜를 주소로 사용해서 데이터 저장.\r\n                  location: location,\r\n                  date: formattedDate,\r\n                  userData,\r\n                  // 저장할 정보들\r\n                };\r\n              }\r\n            }\r\n          }\r\n          setReservationDetail(reservationDetails);\r\n          //업데이트 -> userId가 포함된 정보들\r\n        } else {\r\n          setReservationDetail({});\r\n          //빈 객체로 업데이트\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        Alert.alert('알림', '예약 내역을 불러오는 중 오류가 발생했습니다.');\r\n      }\r\n    };\r\n    fetchReservation();\r\n  }, [userId]);\r\n  \r\n\r\n  const handleReservation = async () => {\r\n    if (!checkedIcon) { \r\n      Alert.alert('알림', '운동 시설을 선택해주세요!');\r\n      return;\r\n    }\r\n    if (!userId) {\r\n      Alert.alert('알림', '로그인이 필요합니다.');\r\n      return;\r\n    }\r\n  \r\n    if (!selectedDate || !selectedStartTime || !selectedEndTime) {\r\n      Alert.alert('알림', '날짜와 시간을 선택해주세요!');\r\n      return;\r\n    }\r\n  \r\n    const formattedDate = format(selectedDate, 'yyyy-MM-dd');\r\n    const startTimeStr = format(selectedStartTime, 'HH:mm');\r\n    const endTimeStr = format(selectedEndTime, 'HH:mm');\r\n    const reservationData = {\r\n      [userId]: startTimeStr + '-' + endTimeStr,\r\n    };\r\n  \r\n    try {\r\n      const db = getDatabase();\r\n      const selectedIconData = iconsData.find((icon) => icon.id === checkedIcon);\r\n  \r\n      if (selectedIconData) {\r\n        const iconEngName = selectedIconData.engName;\r\n        const reservationRef = ref(db, `reservations/${iconEngName}/${formattedDate}/${userId}`);\r\n        const snapshot = await get(reservationRef);\r\n\r\n        if (snapshot.exists()) {\r\n          const existingReservation = snapshot.val();\r\n          const [existingStartTime, existingEndTime] = existingReservation.split('-');\r\n          if (\r\n            (startTimeStr >= existingStartTime && startTimeStr < existingEndTime) ||\r\n            (endTimeStr > existingStartTime && endTimeStr <= existingEndTime)\r\n          ) {\r\n            Alert.alert('알림', '해당 시간에 이미 예약이 있습니다. 다른 시간을 선택해주세요.');\r\n          } else {\r\n            Alert.alert('알림', '이미 예약된 시간이 아닙니다.');\r\n          }\r\n        } else {\r\n          await set(reservationRef, startTimeStr + '-' + endTimeStr);\r\n          const updatedReservation = {\r\n            date: formattedDate,\r\n            userData: reservationData[userId],\r\n          };\r\n          setReservationDetail({ date: formattedDate, userData: reservationData[userId] });\r\n\r\n          setSelectedDate(null);\r\n          setSelectedStartTime(null);\r\n          setSelectedEndTime(null);\r\n          setCheckedIcon(null);\r\n          \r\n          Alert.alert('알림', '예약이 성공적으로 완료되었습니다!');\r\n\r\n        }\r\n      } else {\r\n        Alert.alert('알림', '선택된 아이콘에 대한 데이터를 찾을 수 없습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      Alert.alert('알림', '예약 중 오류가 발생했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  const handleCancelReservation = async () => {\r\n    if (!userId) {\r\n        Alert.alert('알림', '로그인이 필요합니다.');\r\n        return;\r\n    }\r\n\r\n    const db = getDatabase();\r\n    const reservationRef = ref(db, 'reservations');\r\n\r\n    try {\r\n        const snapshot = await get(reservationRef);\r\n        if (snapshot.exists()) {\r\n            const allReservations = snapshot.val();\r\n\r\n            for (const location in allReservations) {\r\n              const locationData = allReservations[location];\r\n            \r\n              for (const formattedDate in locationData) {\r\n                if (userId in locationData[formattedDate]) {\r\n                  delete locationData[formattedDate][userId];\r\n\r\n                  await set(ref(db, `reservations/${location}/${formattedDate}`), locationData[formattedDate]);\r\n            \r\n                  setSelectedDate(null);\r\n                  setReservationDetail({}); \r\n                  setSelectedStartTime(null);\r\n                  setSelectedEndTime(null);\r\n                  setCheckedIcon(null);\r\n            \r\n                  Alert.alert('알림', '예약이 성공적으로 취소되었습니다.');\r\n                  return; \r\n                }\r\n              }\r\n            }\r\n\r\n            setSelectedDate(null);\r\n            setReservationDetail({});\r\n            setSelectedStartTime(null);\r\n            setSelectedEndTime(null);\r\n            setCheckedIcon(null);\r\n\r\n            Alert.alert('알림', '예약이 성공적으로 취소되었습니다.');\r\n        } else {\r\n            setReservationDetail({});\r\n            Alert.alert('알림', '취소할 예약이 존재하지 않습니다.');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        Alert.alert('알림', '예약 내역을 불러오는 중 오류가 발생했습니다.');\r\n    }\r\n};\r\n  \r\n  return (\r\n    <UserProvider>\r\n      <View style={styles.container}>\r\n        <LinearGradient\r\n          style={styles.headerContainer}\r\n          colors={['#a0a0a0', '#f8f9fa', '#f8f9fa']}\r\n        >\r\n        <View style = {styles.headerbutton}>\r\n          <TouchableOpacity onPress={() => navigation.goBack()}>\r\n            <View style={styles.backbutton}>\r\n              <Icon name=\"ios-arrow-back\" size={35}/> \r\n            </View>\r\n          </TouchableOpacity>\r\n        </View>\r\n          <View style={styles.LogoimageContainer}>\r\n            <ImageBackground\r\n              source={require('./../../assets/GWNU-LOGO.png')}\r\n              style={styles.LogoimageStyle}\r\n              resizeMode=\"contain\"\r\n            />\r\n          </View>\r\n          <View style={styles.textContainer}>\r\n            <Text style={styles.textStyle}>국립 강릉원주대학교</Text>\r\n            <Text style={styles.subHeader}>\r\n              GANGNEUNG-WONJU NATIONAL UNIVERSITY\r\n            </Text>\r\n          </View>\r\n          <View style={styles.spacer} />\r\n        </LinearGradient>\r\n        <View style={styles.bodyContainer}>\r\n          <View style={styles.bodyTopContainer}></View>\r\n\r\n          <View style={styles.bodyMiddleContainer}>\r\n            <Image source={require('./GymScreen.jpg')} style={styles.Gymimage} />\r\n            {iconsData.map((icon) => (\r\n            <TouchableOpacity\r\n              key={icon.id}\r\n              style={[\r\n                styles.icon, \r\n                icon.position,\r\n                checkedIcon === icon.id ? styles.checkedIcon : styles.uncheckedIcon\r\n              ]}\r\n              onPress={() => handleIconClick(icon.id)}\r\n            >\r\n              <Text style={styles.iconText}>{icon.name}</Text>\r\n            </TouchableOpacity>\r\n          ))}\r\n          </View>\r\n        </View>\r\n        <View style={styles.bodyBottomContainer} />\r\n        <View style={styles.reservationDetailContainer}>\r\n  <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n    <Text style={styles.reservationDetailTitle}>나의 예약 내역</Text>\r\n    {Object.keys(reservationDetail).length > 0 && (\r\n      <TouchableOpacity\r\n        onPress={handleCancelReservation}\r\n        style={styles.reservationCancelButton}\r\n      >\r\n        <Text\r\n          style={{\r\n            color: 'white',\r\n          }}\r\n        >\r\n          예약 취소하기\r\n        </Text>\r\n      </TouchableOpacity>\r\n    )}\r\n  </View>\r\n  {Object.keys(reservationDetail).length > 0 ? (\r\n    Object.keys(reservationDetail).map((location) => (\r\n        Object.keys(reservationDetail[location]).map((formattedDate) => {\r\n            const userData = reservationDetail[location][formattedDate][userId];\r\n            if (userData) {\r\n                return (\r\n                    <View key={`${location}-${formattedDate}`}>\r\n                        <Text style={styles.reservationDetailText}>\r\n                            예약 장소: {location} {'\\n'}\r\n                            날짜: {formattedDate} {'\\n'}\r\n                            예약 시간: {userData} {'\\n'}\r\n                        </Text>\r\n                    </View>\r\n                );\r\n            }\r\n            return null; // or return <></> if you prefer\r\n        })\r\n    ))\r\n) : (\r\n    <Text style={styles.reservationDetailText}>\r\n        예약 내역이 없습니다!\r\n    </Text>\r\n)}\r\n\r\n</View>\r\n\r\n        <View style={styles.bottomBar}>\r\n          <TouchableOpacity onPress={() => setShowModal(true)}>\r\n            <Text>이용시간 설정하기</Text>\r\n            {selectedDate && selectedStartTime && selectedEndTime && (\r\n              <Text style={styles.greyText}>\r\n                {format(selectedDate, 'yyyy/MMM/dd/EEE')}{' '}\r\n                {format(selectedStartTime, 'HH:mm')}~\r\n                {format(selectedEndTime, 'HH:mm')}\r\n              </Text>\r\n            )}\r\n          </TouchableOpacity>\r\n          <TouchableOpacity\r\n            style={[\r\n              styles.reservationButton,\r\n              checkedIcon ? styles.activeButton : styles.inactiveButton // 동적 스타일 적용\r\n            ]}\r\n            onPress={handleReservation}\r\n            disabled={!checkedIcon} // 활성화/비활성화 상태 설정\r\n          >\r\n            <Text>예약하기</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n\r\n        {showModal && (\r\n          <DateTimePickerComponent\r\n            onClose={() => setShowModal(false)}\r\n            onDateChange={setSelectedDate}\r\n            onStartChange={setSelectedStartTime}\r\n            onEndChange={setSelectedEndTime}\r\n          />\r\n        )}\r\n      </View>\r\n    </UserProvider>\r\n  );\r\n};\r\n\r\nexport default GymScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}