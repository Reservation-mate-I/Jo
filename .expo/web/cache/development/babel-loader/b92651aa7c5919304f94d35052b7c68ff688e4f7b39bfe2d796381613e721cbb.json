{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowWidth = Dimensions.get('window').width;\nvar SelectTimeModal = function SelectTimeModal(_ref) {\n  var visible = _ref.visible,\n    onClose = _ref.onClose,\n    onSelectTime = _ref.onSelectTime,\n    initialSelectedTimes = _ref.initialSelectedTimes;\n  var _useState = useState(initialSelectedTimes || []),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedTimes = _useState2[0],\n    setSelectedTimes = _useState2[1];\n  var times = Array.from({\n    length: 14\n  }, function (_, i) {\n    var hour = 9 + i;\n    var startTime = `${hour < 10 ? `0${hour}` : hour}:00`;\n    var endTime = `${hour + 1 < 10 ? `0${hour + 1}` : hour + 1}:00`;\n    return {\n      startTime: startTime,\n      endTime: endTime\n    };\n  });\n  var toggleTimeSelection = function toggleTimeSelection(timeSlot) {\n    var isSelected = selectedTimes.some(function (selectedTime) {\n      return selectedTime.startTime === timeSlot.startTime && selectedTime.endTime === timeSlot.endTime;\n    });\n    if (isSelected) {\n      setSelectedTimes(function (prevSelectedTimes) {\n        return prevSelectedTimes.filter(function (selectedTime) {\n          return selectedTime.startTime !== timeSlot.startTime || selectedTime.endTime !== timeSlot.endTime;\n        });\n      });\n    } else {\n      setSelectedTimes(function (prevSelectedTimes) {\n        return [].concat(_toConsumableArray(prevSelectedTimes), [timeSlot]);\n      });\n    }\n  };\n  var handleConfirmClick = function handleConfirmClick() {\n    if (selectedTimes.length > 0) {\n      onSelectTime(selectedTimes);\n      onClose();\n    } else {\n      alert(\"시간을 선택하세요\");\n    }\n  };\n  return _jsx(Modal, {\n    transparent: true,\n    visible: visible,\n    onRequestClose: onClose,\n    children: _jsx(View, {\n      style: styles.modalContainer,\n      children: _jsx(View, {\n        style: styles.modalWrapper,\n        children: _jsxs(View, {\n          style: styles.modalContent,\n          children: [_jsx(Text, {\n            style: styles.modalTitle,\n            children: \"\\uC2DC\\uAC04 \\uC120\\uD0DD\"\n          }), _jsx(ScrollView, {\n            children: times.map(function (timeSlot, index) {\n              return _jsx(TouchableOpacity, {\n                style: [styles.timeSlot, selectedTimes.some(function (selectedTime) {\n                  return selectedTime.startTime === timeSlot.startTime && selectedTime.endTime === timeSlot.endTime;\n                }) && styles.selectedTimeSlot],\n                onPress: function onPress() {\n                  toggleTimeSelection(timeSlot);\n                },\n                children: _jsxs(Text, {\n                  style: styles.timeSlotText,\n                  children: [timeSlot.startTime, \" - \", timeSlot.endTime]\n                })\n              }, index);\n            })\n          }), _jsx(TouchableOpacity, {\n            style: styles.confirmButton,\n            onPress: handleConfirmClick,\n            children: _jsx(Text, {\n              style: styles.confirmButtonText,\n              children: \"\\uD655\\uC778\"\n            })\n          })]\n        })\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  },\n  modalWrapper: {\n    maxWidth: windowWidth * 0.8,\n    alignSelf: 'center'\n  },\n  modalContent: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 20,\n    maxHeight: '50%'\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    textAlign: 'center'\n  },\n  timeSlot: {\n    height: 50,\n    borderBottomWidth: 1,\n    borderBottomColor: 'lightgray',\n    justifyContent: 'center',\n    paddingLeft: 10\n  },\n  selectedTimeSlot: {\n    backgroundColor: 'lightgray'\n  },\n  timeSlotText: {\n    fontSize: 16\n  },\n  confirmButton: {\n    backgroundColor: 'blue',\n    padding: 10,\n    borderRadius: 5,\n    alignItems: 'center',\n    marginTop: 10\n  },\n  confirmButtonText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'white'\n  }\n});\nexport default SelectTimeModal;","map":{"version":3,"names":["React","useState","Modal","View","Text","TouchableOpacity","StyleSheet","ScrollView","Dimensions","jsx","_jsx","jsxs","_jsxs","windowWidth","get","width","SelectTimeModal","_ref","visible","onClose","onSelectTime","initialSelectedTimes","_useState","_useState2","_slicedToArray","selectedTimes","setSelectedTimes","times","Array","from","length","_","i","hour","startTime","endTime","toggleTimeSelection","timeSlot","isSelected","some","selectedTime","prevSelectedTimes","filter","concat","_toConsumableArray","handleConfirmClick","alert","transparent","onRequestClose","children","style","styles","modalContainer","modalWrapper","modalContent","modalTitle","map","index","selectedTimeSlot","onPress","timeSlotText","confirmButton","confirmButtonText","create","flex","justifyContent","alignItems","backgroundColor","maxWidth","alignSelf","padding","borderRadius","maxHeight","fontSize","fontWeight","marginBottom","textAlign","height","borderBottomWidth","borderBottomColor","paddingLeft","marginTop","color"],"sources":["C:/Users/ops00/OneDrive/문서/GitHub/Mobile_Programming_01/Moblie__Programming_01-1/Gym/SelectTimeModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\r\nimport { Dimensions } from 'react-native';\r\n\r\nconst windowWidth = Dimensions.get('window').width;\r\n\r\nconst SelectTimeModal = ({ visible, onClose, onSelectTime, initialSelectedTimes }) => {\r\n  const [selectedTimes, setSelectedTimes] = useState(initialSelectedTimes || []);\r\n\r\n  const times = Array.from({ length: 14 }, (_, i) => {\r\n    // 09:00부터 22:00까지 1시간 간격으로 시간 목록 생성\r\n    const hour = 9 + i;\r\n    const startTime = `${hour < 10 ? `0${hour}` : hour}:00`;\r\n    const endTime = `${hour + 1 < 10 ? `0${hour + 1}` : hour + 1}:00`;\r\n    return { startTime, endTime };\r\n  });\r\n\r\n  const toggleTimeSelection = (timeSlot) => {\r\n    const isSelected = selectedTimes.some((selectedTime) => {\r\n      return (\r\n        selectedTime.startTime === timeSlot.startTime &&\r\n        selectedTime.endTime === timeSlot.endTime\r\n      );\r\n    });\r\n\r\n    if (isSelected) {\r\n      // 이미 선택한 시간이라면 선택 해제\r\n      setSelectedTimes((prevSelectedTimes) => {\r\n        return prevSelectedTimes.filter((selectedTime) => {\r\n          return (\r\n            selectedTime.startTime !== timeSlot.startTime ||\r\n            selectedTime.endTime !== timeSlot.endTime\r\n          );\r\n        });\r\n      });\r\n    } else {\r\n      // 선택한 시간이 아니라면 추가\r\n      setSelectedTimes((prevSelectedTimes) => [...prevSelectedTimes, timeSlot]);\r\n    }\r\n  };\r\n\r\n  const handleConfirmClick = () => {\r\n    if (selectedTimes.length > 0) {\r\n      onSelectTime(selectedTimes);\r\n      onClose();\r\n    } else {\r\n      alert(\"시간을 선택하세요\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal transparent visible={visible} onRequestClose={onClose}>\r\n      <View style={styles.modalContainer}>\r\n        <View style={styles.modalWrapper}>\r\n          <View style={styles.modalContent}>\r\n            <Text style={styles.modalTitle}>시간 선택</Text>\r\n            <ScrollView>\r\n              {times.map((timeSlot, index) => (\r\n                <TouchableOpacity\r\n                  key={index}\r\n                  style={[\r\n                    styles.timeSlot,\r\n                    selectedTimes.some((selectedTime) => {\r\n                      return (\r\n                        selectedTime.startTime === timeSlot.startTime &&\r\n                        selectedTime.endTime === timeSlot.endTime\r\n                      );\r\n                    }) && styles.selectedTimeSlot\r\n                  ]}\r\n                  onPress={() => {\r\n                    toggleTimeSelection(timeSlot);\r\n                  }}\r\n                >\r\n                  <Text style={styles.timeSlotText}>\r\n                    {timeSlot.startTime} - {timeSlot.endTime}\r\n                  </Text>\r\n                </TouchableOpacity>\r\n              ))}\r\n            </ScrollView>\r\n            <TouchableOpacity style={styles.confirmButton} onPress={handleConfirmClick}>\r\n              <Text style={styles.confirmButtonText}>확인</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  modalContainer: {\r\n    flex: 1,\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n  },\r\n  modalWrapper: {\r\n    maxWidth: windowWidth * 0.8, // 화면 넓이의 80%로 제한\r\n    alignSelf: 'center', // 수평 가운데 정렬\r\n  },\r\n  modalContent: {\r\n    backgroundColor: 'white',\r\n    padding: 20,\r\n    borderRadius: 20,\r\n    maxHeight: '50%', // 팝업창의 높이 제한\r\n  },\r\n  modalTitle: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    textAlign: 'center',\r\n  },\r\n  timeSlot: {\r\n    height: 50,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: 'lightgray',\r\n    justifyContent: 'center',\r\n    paddingLeft: 10,\r\n  },\r\n  selectedTimeSlot: {\r\n    backgroundColor: 'lightgray',\r\n  },\r\n  timeSlotText: {\r\n    fontSize: 16,\r\n  },\r\n  confirmButton: {\r\n    backgroundColor: 'blue',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    alignItems: 'center',\r\n    marginTop: 10,\r\n  },\r\n  confirmButtonText: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n  },\r\n});\r\n\r\nexport default SelectTimeModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}